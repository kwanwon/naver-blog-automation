{
  "rules": [
    "모든 코드 변경 전에 현재 작동하는 코드를 backup 폴더에 날짜와 시간으로 백업할 것",
    "네이버 로그인 및 블로그 접근 함수는 별도 모듈로 분리하여 재사용성 높이기",
    "셀레니움 선택자는 여러 방식(ID, 클래스, XPath)으로 백업 선택자 구현하여 네이버 UI 변경에 대응할 것",
    "모든 웹 요소 접근 시 명시적 대기(Explicit Wait) 사용하고 최소 1초 이상 타임아웃 설정할 것",
    "블로그 포스팅 기능은 텍스트 작성, 이미지 삽입, 스티커 추가, 태그 입력 등으로 모듈화할 것",
    "자동화 중 캡차(CAPTCHA) 발생 시 사용자에게 알림 제공하고 수동 개입 기능 구현할 것",
    "네이버 API 이용 시 요청 제한 준수하고 과도한 요청으로 계정 제한되지 않도록 지연 시간 설정할 것",
    "로그인 정보, API 키 등 민감한 정보는 별도 config 파일로 분리하고 .gitignore에 추가할 것",
    "모든 함수는 한글 주석으로 목적, 파라미터, 반환값 상세히 문서화할 것",
    "포스팅 실패 시 자동 재시도 로직 구현하고 최대 3회까지만 시도할 것",
    "웹드라이버 설정은 headless 모드와 일반 모드 모두 지원하고 디버깅 시 일반 모드 사용할 것",
    "블로그 글 템플릿은 최소 5개 이상 다양하게 준비하고 랜덤하게 선택하여 사용할 것",
    "에러 발생 시 상세 로그 기록하고 스크린샷 캡처하여 troubleshooting 폴더에 저장할 것",
    "네이버 블로그 UI 변경 감지 시 관리자에게 알림 기능 구현할 것",
    "매 실행 시 이전 실행 로그 확인하여 중복 포스팅 방지할 것",
    "글 작성 중간에 자동 저장 기능 구현하여 작업 중단 시에도 내용 보존할 것",
    "사용자 활동을 시뮬레이션하기 위해 불규칙한 대기 시간과 마우스 움직임 구현할 것",
    "이미지와 동영상 삽입 시 업로드 완료 확인 후 다음 단계 진행할 것",
    "포스팅 성공 여부를 확인하는 검증 로직 구현하고 결과 로그에 기록할 것",
    "웹 요소 접근 실패 시 대체 방법(JavaScript 실행 등) 구현하여 견고성 높일 것",
    "스티커 삽입 기능은 스티커 팝업 열기, 스티커 선택, 삽입 완료 확인의 세 단계로 명확히 분리할 것",
    "각 세션 종료 후 웹드라이버와 관련 리소스 완전히 정리하여 메모리 누수 방지할 것",
    "블로그 작성 중 입력 요소 포커스 확인 로직 추가하여 텍스트 입력 오류 방지할 것",
    "한글 입력 시 IME 문제에 대응하기 위해 명시적 키 이벤트 사용할 것",
    "코드 수정 후 반드시 실제 브라우저에서 테스트하고 성공한 경우에만 커밋할 것",
    
    "MCP 서버 도구 사용 시 API 키와 접근 정보는 별도 .env 파일에 보관하고 버전 관리 시스템에서 제외할 것",
    "MCP 서버 API 호출 전후로 로그를 남겨 서버 통신 과정 추적이 가능하도록 할 것",
    "MCP 서버와의 통신은 비동기 처리하여 UI 응답성을 유지할 것",
    "MCP 서버 연결 실패 시 최소 3회 재시도 로직 구현하고 재시도 간격은 지수적으로 증가시킬 것",
    "MCP 도구 사용 전 서버 상태 확인하는 헬스체크 로직 구현할 것",
    "MCP 서버 응답 시간이 5초 이상 지연될 경우 사용자에게 진행 상황 표시할 것",
    "MCP 서버 인증 토큰은 만료 시간 확인하여 자동 갱신 로직 구현할 것",
    "MCP API 응답 결과는 캐싱하여 동일 요청 반복 시 서버 부하 줄일 것",
    "MCP 에러 응답 코드별로 구체적인 대응 방안 및 사용자 안내 메시지 정의할 것",
    "MCP 서버 통신 시 압축 및 최적화된 데이터 포맷을 사용하여 네트워크 효율성 높일 것",
    "MCP 서비스별 적절한 타임아웃 값 설정하고 장기 실행 작업은 백그라운드로 처리할 것",
    "MCP 서버 응답 데이터를 가공하여 클라이언트에 맞는 형식으로 변환하는 어댑터 패턴 구현할 것",
    "MCP 서버 기능 사용 통계를 수집하여 사용 패턴 분석 및 최적화에 활용할 것",
    "MCP 서버와의 통신 실패 시 오프라인 모드로 전환하여 최소 기능 유지할 수 있는 구조 구현할 것",
    "MCP 서버 API 버전 변경 시 하위 호환성 유지할 수 있는 미들웨어 레이어 설계할 것"
  ]
} 